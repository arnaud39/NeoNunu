{"version":3,"sources":["ActionProvider.js","MessageParser.js","components/LearningOptions/LearningOptions.jsx","config.js","App.js","reportWebVitals.js","index.js"],"names":["ActionProvider","createChatBotMessage","setStateFunc","createClientMessage","this","setState","greetingMessage","updateChatbotState","message","prevState","messages","MessageParser","actionProvider","state","lowerCaseMessage","toLowerCase","includes","greet","LearningOptions","props","optionsMarkup","text","handler","id","map","option","className","onClick","config","botName","initialMessages","widget","customStyles","botMessageBox","backgroundColor","chatButton","widgets","widgetName","widgetFunc","App","messageParser","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"0QAwBeA,E,WAtBb,WAAYC,EAAsBC,EAAcC,GAAsB,oBACpEC,KAAKH,qBAAuBA,EAC5BG,KAAKC,SAAWH,EAChBE,KAAKD,oBAAsBA,E,oDAI3B,IAAMG,EAAkBF,KAAKH,qBAAqB,eAClDG,KAAKG,mBAAmBD,K,yCAEPE,GAKdJ,KAAKC,UAAS,SAAAI,GAAS,kCACjBA,GADiB,IACNC,SAAS,GAAD,mBAAMD,EAAUC,UAAhB,CAA0BF,a,KCH3CG,E,WAbb,WAAYC,EAAgBC,GAAQ,oBAClCT,KAAKQ,eAAiBA,EACtBR,KAAKS,MAAQA,E,kDAGTL,GACJ,IAAMM,EAAmBN,EAAQO,eAC7BD,EAAiBE,SAAS,UAAWF,EAAiBE,SAAS,QACjEZ,KAAKQ,eAAeK,Y,KCkBXC,G,MAtBS,SAACC,GACvB,IAQMC,EARU,CACd,CAAEC,KAAM,aAAcC,QAAS,aAAUC,GAAI,GAC7C,CAAEF,KAAM,qBAAsBC,QAAS,aAAUC,GAAI,GACrD,CAAEF,KAAM,OAAQC,QAAS,aAAUC,GAAI,GACvC,CAAEF,KAAM,WAAYC,QAAS,aAAUC,GAAI,GAC3C,CAAEF,KAAM,iBAAkBC,QAAS,aAAUC,GAAI,IAGrBC,KAAI,SAACC,GAAD,OAChC,wBACEC,UAAU,yBAEVC,QAASF,EAAOH,QAHlB,SAKGG,EAAOJ,MAHHI,EAAOF,OAOhB,OAAO,qBAAKG,UAAU,6BAAf,SAA6CN,MCCvCQ,EArBA,CACbC,QAAS,UACTC,gBAAiB,CAAC7B,+BAAqB,mDAAoD,CACzF8B,OAAQ,qBAEVC,aAAc,CACZC,cAAe,CACbC,gBAAiB,WAEnBC,WAAY,CACVD,gBAAiB,YAGrBE,QAAS,CACP,CACEC,WAAY,kBACbC,WAAY,SAACnB,GAAD,OAAW,cAAC,EAAD,eAAqBA,QCHlCoB,MAVf,WACE,OACE,qBAAKb,UAAU,MAAf,SACE,wBAAQA,UAAU,aAAlB,SACE,cAAC,IAAD,CAASE,OAAQA,EAAQhB,eAAgBZ,EAAqBwC,cAAe7B,SCAtE8B,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqBC,MAAK,YAAkD,IAA/CC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAQP,OCDdQ,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1Bb,M","file":"static/js/main.952d0d57.chunk.js","sourcesContent":["// ActionProvider starter code\nclass ActionProvider {\n  constructor(createChatBotMessage, setStateFunc, createClientMessage) {\n    this.createChatBotMessage = createChatBotMessage;\n    this.setState = setStateFunc;\n    this.createClientMessage = createClientMessage;\n  }\n\n  greet() {\n    const greetingMessage = this.createChatBotMessage(\"Hi, friend.\");\n    this.updateChatbotState(greetingMessage);\n  }\n  updateChatbotState(message) {\n \n    // NOTE: This function is set in the constructor, and is passed in      // from the top level Chatbot component. The setState function here     // actually manipulates the top level state of the Chatbot, so it's     // important that we make sure that we preserve the previous state.\n     \n        \n       this.setState(prevState => ({\n          ...prevState, messages: [...prevState.messages, message]\n        }))\n      }\n\n}\n\nexport default ActionProvider;\n","// MessageParser starter code\nclass MessageParser {\n  constructor(actionProvider, state) {\n    this.actionProvider = actionProvider;\n    this.state = state;\n  }\n\n  parse(message) {\n    const lowerCaseMessage = message.toLowerCase();\n    if (lowerCaseMessage.includes(\"hello\") ||lowerCaseMessage.includes(\"hi\")){\n      this.actionProvider.greet();\n    }\n  }\n}\n\nexport default MessageParser;\n","// in src/components/LearningOptions/LearningOptions.jsx\n\nimport React from \"react\";\n\nimport \"./LearningOptions.css\";\n\nconst LearningOptions = (props) => {\n  const options = [\n    { text: \"Javascript\", handler: () => {}, id: 1 },\n    { text: \"Data visualization\", handler: () => {}, id: 2 },\n    { text: \"APIs\", handler: () => {}, id: 3 },\n    { text: \"Security\", handler: () => {}, id: 4 },\n    { text: \"Interview prep\", handler: () => {}, id: 5 },\n  ];\n\n  const optionsMarkup = options.map((option) => (\n    <button\n      className=\"learning-option-button\"\n      key={option.id}\n      onClick={option.handler}\n    >\n      {option.text}\n    </button>\n  ));\n\n  return <div className=\"learning-options-container\">{optionsMarkup}</div>;\n};\n\nexport default LearningOptions;\n\n","// Config starter code\nimport React from \"react\";\nimport { createChatBotMessage } from \"react-chatbot-kit\";\nimport LearningOptions from \"./components/LearningOptions/LearningOptions\";\n\nconst config = { \n  botName: \"NeoNunu\",\n  initialMessages: [createChatBotMessage(\"Hi, I'm here to help. What do you want to learn?\", {\n    widget: \"learningOptions\",\n  })],\n  customStyles: {\n    botMessageBox: {\n      backgroundColor: \"#376B7E\",\n    },\n    chatButton: {\n      backgroundColor: \"#376B7E\",\n    },\n  },\n  widgets: [\n    {\n      widgetName: \"learningOptions\",\n     widgetFunc: (props) => <LearningOptions {...props} />,\n    },\n  ],\n}\n\nexport default config\n","import React from 'react';\nimport Chatbot from 'react-chatbot-kit'\nimport './App.css';\n\nimport ActionProvider from './ActionProvider';\nimport MessageParser from './MessageParser';\nimport config from './config';\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <header className=\"App-header\">\n        <Chatbot config={config} actionProvider={ActionProvider} \t    messageParser={MessageParser} />\n      </header>\n    </div>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}